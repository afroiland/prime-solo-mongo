// 1. Create a collection named orders.

db.createCollection('orders')

// 2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.

var orders = db.orders
orders.insert( {orderDate: new Date('2016-11-28'), orderTotal: 100,
lineItems: {unitPrice: 20, quantity: 5, productName: "Ok Product"}})
orders.insert( {orderDate: new Date('2016-11-28'), orderTotal: 100,
lineItems: {unitPrice: 25, quantity: 4, productName: "Ok Product2"}})
orders.insert( {orderDate: new Date('2016-11-28'), orderTotal: 100,
lineItems: {unitPrice: 50, quantity: 2, productName: "Ok Product3"}})


// 3. Find a single order document, any order document.

db.orders.find({}).limit(1)

// 4. Find all orders and make them look pretty.

db.orders.find({}).pretty()

// 5. Find all orders with an orderDate that is prior to 1/1/2016.

db.orders.find({orderDate: {$lt: new Date('2016-01-01')}})

// 6. Find all orders with an orderDate that is after 1/1/2016.

db.orders.find({orderDate: {$gt: new Date('2016-01-01')}})

// 7. Find orders with lineItems that have a quantity that is less than 50,
// but greater than 5. HINT: Look at $and and dot notation.

db.getCollection('orders').find({"lineItems.quantity": {$lt: 50}, "lineItems.quantity": {$gt: 5}})

// 8. Update one of your line items to 42.99. HINT: Look at dot notation

db.orders.update({"_id": ObjectId("584020b607fe80d08f958812")}, {$set: {"lineItems.unitPrice": 42.99}})

// 9. Remove one of your orders.

db.orders.remove({"_id": ObjectId("5840203d07fe80d08f958810")})
